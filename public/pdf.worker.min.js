// PDF.js Worker Loader
// File ini berfungsi sebagai loader untuk PDF.js worker dari CDN dengan fallback dan polyfill

(function() {
  // Versi PDF.js yang kita gunakan
  const version = '5.2.133';
  
  // Daftar CDN alternatif untuk PDF.js worker
  const cdnUrls = [
    `/pdf.worker.min.js?v=${version}`, // Coba file lokal terlebih dahulu dengan query param untuk menghindari cache
    `https://unpkg.com/pdfjs-dist@${version}/build/pdf.worker.min.js`,
    `https://cdn.jsdelivr.net/npm/pdfjs-dist@${version}/build/pdf.worker.min.js`,
    `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${version}/pdf.worker.min.js`
  ];

  // Coba buat placeholder WorkerGlobalScope jika belum ada
  try {
    // Implementasi Promise.withResolvers jika belum ada
    if (typeof Promise.withResolvers !== 'function') {
      Promise.withResolvers = function() {
        let resolve, reject;
        const promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
        return { promise, resolve, reject };
      };
    }
    
    // Implementasi placeholder pdfjsWorker jika belum diinisialisasi
    if (typeof self !== 'undefined' && !self.pdfjsWorker) {
      self.pdfjsWorker = {
        isWorker: true,
        // Placeholder untuk feature detection
        hasFeature: function(name) {
          return false;
        }
      };
    }
  } catch (e) {
    console.error('Error setting up worker fallbacks:', e);
  }

  // Fungsi untuk memuat worker dari URL
  function loadWorkerFromUrl(url) {
    return new Promise((resolve, reject) => {
      try {
        // Buat script element
        const script = document.createElement('script');
        script.src = url;
        script.async = true;
        script.crossOrigin = 'anonymous';
        
        // Tambahkan ke document head
        document.head.appendChild(script);
        
        script.onload = () => {
          console.log(`PDF.js worker berhasil dimuat dari: ${url}`);
          resolve(true);
        };
        
        script.onerror = () => {
          console.warn(`Gagal memuat PDF.js worker dari: ${url}`);
          document.head.removeChild(script);
          reject(new Error(`Gagal memuat worker dari ${url}`));
        };
      } catch (error) {
        reject(error);
      }
    });
  }

  // Fungsi untuk melakukan preload URL worker
  function preloadWorkerUrl(url) {
    try {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'script';
      link.href = url;
      link.crossOrigin = 'anonymous';
      document.head.appendChild(link);
      console.log(`Preloading worker dari: ${url}`);
    } catch (e) {
      // Gagal preload tidak kritis
      console.warn('Gagal melakukan preload worker:', e);
    }
  }

  // Jika di browser, coba muat worker secara sequential
  if (typeof window !== 'undefined') {
    // Inisialisasi loading
    console.log('Memulai proses memuat PDF.js worker');
    
    // Preload URL pertama dan kedua secara paralel
    if (cdnUrls.length >= 2) {
      preloadWorkerUrl(cdnUrls[0]);
      preloadWorkerUrl(cdnUrls[1]);
    }
    
    // Fungsi untuk mencoba load dari beberapa CDN
    async function tryLoadFromCdns() {
      for (let i = 0; i < cdnUrls.length; i++) {
        try {
          await loadWorkerFromUrl(cdnUrls[i]);
          return true; // Berhasil memuat dari CDN ini
        } catch (error) {
          console.warn(`Gagal memuat dari sumber #${i+1}, mencoba yang berikutnya...`);
          // Lanjutkan dengan CDN berikutnya
        }
      }
      
      // Semua CDN gagal
      console.error('Semua sumber PDF.js worker gagal dimuat');
      return false;
    }
    
    // Mulai proses loading
    tryLoadFromCdns().catch(error => {
      console.error('Terjadi kesalahan fatal saat memuat PDF.js worker:', error);
      // Notifikasi ke pengguna bahwa ada kesalahan
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new CustomEvent('pdfjs-worker-error', { 
          detail: { error: error.message || 'Failed to load PDF.js worker' } 
        }));
      }
    });
  }
})();
